package {	import flash.text.TextField;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.events.*;	import flash.geom.Rectangle;		import flash.errors.IllegalOperationError;			import flash.external.ExternalInterface;	import flash.text.TextField	import flash.utils.setTimeout;	import flash.text.TextFormat;			import flash.system.LoaderContext;	import flash.system.Security;	import flash.system.SecurityDomain;	import flash.system.ApplicationDomain;		import flash.display.StageScaleMode;		import flash.events.FullScreenEvent;		import flash.net.LocalConnection;			public class HLoader extends MovieClip {						public var embedURL:String;		public var embedURLDefault:String = "http://www.hulu.com/playerembed.swf?eid=aRrdJE6169uUirxL-nAXWg";				public var btnFullScreen:Sprite = new Sprite();		public var loader:Loader;				private var count:uint = 0;				private var textArea : TextField;				private var localConn : LocalConnection;				public function HLoader() {						stop();						//instance = this;						stage.displayState == StageDisplayState.NORMAL;												textArea = new TextField();						textArea.x = 100;			textArea.y = 300;			textArea.width = 700;			textArea.defaultTextFormat = new TextFormat(null,16,0xffffff)						//addChild( textArea );						embedURL = root.loaderInfo.parameters['vUrl'];						textArea.text = "embed " + embedURL						//embedURL = embedURLDefault;						if (embedURL != null) {								loadSwf( embedURL );											}												//loadClip();			addButton();						//flash.utils.setTimeout( addExternal , 500 );						localConn = new LocalConnection();						localConn.client = this;			localConn.allowDomain("*");						localConn.connect( "_huluConnection");									//this.fart = function () : void {			  			//  textArea.text = "rrr";			  			//}								}						private function addExternal() : void {					flash.external.ExternalInterface.addCallback("loadSwf" , loadSwf );			flash.external.ExternalInterface.addCallback("destroyLoader", destroyLoader);			flash.external.ExternalInterface.addCallback("goFullScreen", goFullScreen);			flash.external.ExternalInterface.addCallback("exitFullScreen", exitFullScreen);			flash.external.ExternalInterface.addCallback("shrinkPlayer",  shrinkPlayer);					}						private function addButton():void {			/*   			btnFullScreen.name = "spriteButton";			btnFullScreen.mouseChildren = true;			btnFullScreen.x = 10;			btnFullScreen.y = 10;					// graphics			var btnFullScreenGraphics:Sprite = new Sprite();			btnFullScreenGraphics.name = "spriteGraphics";			btnFullScreenGraphics.graphics.beginFill(0x4080A0);			btnFullScreenGraphics.graphics.drawCircle(50, 50, 25);						// add to display list			btnFullScreen.addChild(btnFullScreenGraphics);			addChild(btnFullScreen);			*/						// events			fsButton1.buttonMode = true;			fsButton1.addEventListener(MouseEvent.CLICK, buttonClick);						fsButton1.addEventListener(MouseEvent.MOUSE_OVER, buttonOver);						fsButton1.addEventListener(MouseEvent.MOUSE_OUT, buttonOut );						fsButton1.visible = false;		}			function buttonClick(evt:MouseEvent):void {    		trace(evt.target.name);			goFullScreen();		}				function buttonOver(evt:MouseEvent):void {    		fsButton1.alpha = .5;		}				function buttonOut(evt:MouseEvent):void {    		fsButton1.alpha = 1;		}				// functions to enter and leave full screen mode		public function goFullScreen():void		{						textArea.text = "Fs attempted";   						  if (stage.displayState == StageDisplayState.NORMAL)			   {					stage.displayState = StageDisplayState.FULL_SCREEN;				} else {					stage.displayState = StageDisplayState.NORMAL;				}							}				public function fakeClick( ) : void {						flash.utils.setTimeout( function() : void { btnFullScreen.dispatchEvent( new MouseEvent(MouseEvent.CLICK) )  } , 500 );				}				function exitFullScreen(event:ContextMenuEvent):void		{   			stage.displayState = StageDisplayState.NORMAL;		}				public function shrinkPlayer() : void {						this.width = 790/2;			this.height = 368/2;			/*			if ( loader != null ) {								loader.width = 150;				loader.height = 100;			}			*/							}				private function destroyLoader() : void {								trace("closing, unloading and nulling loader");				try { loader.close(); } catch (e:*) {}				try { loader.unload(); } catch (e:*) {}				removeChild(loader);				loader = null;								}						public function loadSwf( src : String ):void {						textArea.text = "loadSwf: " + src;						if (loader != null) {						destroyLoader();							}						//btnFullScreen.visible = false;						trace("loading swf");			loader = new Loader();							var ldrContext :LoaderContext = new LoaderContext(true);			ldrContext.securityDomain = SecurityDomain.currentDomain;			ldrContext.applicationDomain = ApplicationDomain.currentDomain;						loader.load( new URLRequest( src )  );			loader.x = 0;			loader.y = 0;			//loader.content.addEventListener( Event.COMPLETE , onLoadDone );			loader.contentLoaderInfo.addEventListener( Event.COMPLETE , onLoadDone );						//			addChildAt(loader , 0);					}				private function onLoadDone( evt : Event ) : void {					//loader.contentLoaderInfo.addEventListener( FullScreenEvent.FULL_SCREEN , onFs );			//loader.content.addEventListener( FullScreenEvent.FULL_SCREEN , onFs );			//loader.addEventListener( FullScreenEvent.FULL_SCREEN , onFs );			//addEventListener( FullScreenEvent.FULL_SCREEN , onFs );						addChild( fsButton1 );			fsButton1.visible = true;			//stage.scaleMode = StageScaleMode.NO_SCALE;					}				private function onFs( evt : FullScreenEvent ) : void {					loader.alpha = .2;		}			}}