/*** track_fade.fla   frame 1, Actions layer ***/import mx.transitions.Tween;import mx.transitions.easing.*;// variable declarationsvar loaded:Number;var total:Number;var percent:Number;var intervalID:Number;var URL:String = "large1.swf";var container_mc:MovieClip;var ls_mc:MovieClip;// function declarationsfunction progressTracker(target_mc:MovieClip):Void {    loaded = target_mc.getBytesLoaded();    total  = target_mc.getBytesTotal();    if (loaded == undefined || total == undefined || total < 10) {        return;    }    percent = Math.round(loaded/total * 100);    if (loaded == total && percent > 99) {        clearInterval(intervalID);    }}// event callback handlersfunction progressDisplay(prop:String, oldVal:Number, newVal:Number, userdata:Object):Number {    userdata.clip_mc._xscale = newVal;    userdata.display_txt.text = newVal.toString();    if (newVal >= 100) {        this.unwatch(prop);        var tweenHandler:Object = new Tween(userdata.clip_mc._parent, "_alpha", Regular.easeIn, 100, 0, 1, true);        tweenHandler.onMotionFinished = function() {            userdata.clip_mc._parent.removeMovieClip();        }    }    updateAfterEvent();    return newVal;}// initial frame actionsls_mc = this.attachMovie("loadStatus", "loadStatus_mc", 10000);ls_mc._x = Stage.width/2;        // 300;ls_mc._y = Stage.height/2 - 20;  // 279.8;container_mc = this.createEmptyMovieClip("large_mc", 0);container_mc.loadMovie(URL);intervalID = setInterval(progressTracker, 50, container_mc);this.watch("percent", progressDisplay, {clip_mc:loadStatus_mc.pb_mc, display_txt:loadStatus_mc.percentage_txt});container_mc.swapDepths(-16384);           // swap clip to depth beneath text fields